#!/bin/bash
#
# `pomo`: Simple pomodoro timer
#
# Depends: `tput`, `rm`, `mkdir`, `screen`/`tmux`
# Environment: none
#
# TODO: Abstract alert function into script which prints an arbitrary message
#       to the screen.
# TODO: Alert function makes a mess if it executes while in insert mode in `vi`

usage () {
	echo 'usage: pomo [ start <min>[m[<sec>s]] | stop | reset | resume ]'
	exit
} >&2

alert () {
	x=$(($(tput cols) / 2 - 15))
	y=$(($(tput lines) / 2 - 6))
	w=$(tput smso)
	c=$(tput rmso)

	next () {
		tput cup "$y" "$x"
		y=$((y + 1))
	}

	unrec () {
		next
		printf 'not recognised: %s\n' "$reply"
	}

	# ###  ###  #####  ###  #   #
	# #  # #  # #     #   # #  #
	# ###  ###  ####  ##### ###
	# #  # #  # #     #   # #  #
	# ###  #  # ##### #   # #   #
	#   ##### # #   # ##### #
	#     #   # ## ## #     #
	#     #   # # # # ####  #
	#     #   # #   # #
	#     #   # #   # ##### #
	tput clear
	next
	echo "$w    $c  $w    $c  $w     $c  $w   $c  $w $c   $w $c"
	next
	echo "$w $c   $w $c $w $c   $w $c $w $c     $w $c   $w $c $w $c  $w $c"
	next
	echo "$w    $c  $w    $c  $w    $c  $w     $c $w   $c"
	next
	echo "$w $c   $w $c $w $c   $w $c $w $c     $w $c   $w $c $w $c  $w $c"
	next
	echo "$w    $c  $w $c   $w $c $w     $c $w $c   $w $c $w $c   $w $c"
	y=$((y + 1))
	next
	echo "    $w     $c $w $c $w $c   $w $c $w     $c $w $c"
	next
	echo "      $w $c   $w $c $w  $c $w  $c $w $c     $w $c"
	next
	echo "      $w $c   $w $c $w $c $w $c $w $c $w    $c  $w $c"
	next
	echo "      $w $c   $w $c $w $c   $w $c $w $c"
	next
	echo "      $w $c   $w $c $w $c   $w $c $w     $c $w $c"
	y=$((y + 1))

	while :; do
		next
		printf 'Restart timer? [Y/n] '
		read -r reply
		case "$reply" in
			[Yy]|[Yy]es|"") pomo start 25m ;;
			[Nn]|[Nn]o) : ;;
			*) continue ;;
		esac
		break
	done
}

is_running () {
	[[ -e $pid_log ]]
}

check () {
	local T
	[[ -e $time_log ]] && T="$(<"$time_log")"

	if is_running; then
		printf 'pomo: remaining: %02dm%02ds\n' $((T / 60)) $((T % 60))
	elif [[ -n $T ]]; then
		printf 'pomo: stopped: %02dm%02ds\n' $((T / 60)) $((T % 60))
	else
		! printf 'pomo: no timer info available\n' >&2
	fi
}

timer () {
	local time="$1" session="$2"

	[[ -d $log_dir ]] || mkdir "$log_dir"
	printf '%s\n' $$ >"$pid_log"

	while (( time > 0 )); do
		printf '%s\n' "$time" >"$time_log"
		((time--))
		sleep 1
	done

	if [ -n "$TMUX" ]; then
		tmux neww -t "$session" pomo alert
	elif [ -n "$STY" ]; then
		screen -S "$session" -X screen pomo alert
	else
		pomo alert
	fi

	rm -r "$log_dir"
	stop
}

start () {
	local seconds minutes time regex session
	time="${1:-25m}"

	if regex='^([0-9]+)m([0-9]+)s$'; [[ $time =~ $regex ]]; then
		minutes="${BASH_REMATCH[1]}"
		seconds="${BASH_REMATCH[2]}"
	elif regex='^([0-9]+)([ms]?)$'; [[ $time =~ $regex ]]; then
		case "${BASH_REMATCH[2]}" in
			m|"") minutes="${BASH_REMATCH[1]}" ;;
			s) seconds="${BASH_REMATCH[1]}" ;;
		esac
	else
		usage
	fi

	time=$((${minutes:=0} * 60 + ${seconds:=0}))

	if [[ -n $TMUX ]]; then
		session="$(tmux display -p '#{session_id}')"
		tmux new -ds pomodoro pomo timer "$time" "$session" 2>/dev/null
	elif [[ -n $STY ]]; then
		session="$STY"
		screen -qlsS pomodoro
		(( $? < 11 )) && screen -c/dev/null -dmS pomodoro \
			pomo timer "$time" "$session"
	else
		pomo timer "$time" &
	fi
}

stop () {
	is_running && kill "$(<"$pid_log")"
	rm "$pid_log"
	check
}

reset () {
	rm -r "$log_dir" 2>/dev/null
}

resume () {
	start "$(<"$time_log")s"
}

main ()
{
	parent=/proc/$PPID/fd/0
	log_dir=/tmp/pomo
	time_log="${log_dir}/time"
	pid_log="${log_dir}/pid"

	(( $# > 3 )) && usage

	case "$1" in
		start) start "$2" ;;
		stop) stop ;;
		reset) reset ;;
		resume) resume ;;
		timer) timer "$2" "$3" ;;
		alert) alert ;;
		"") check ;;
		-h|--help|*) usage ;;
	esac
}

main "$@"

