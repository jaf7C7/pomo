#!/bin/bash
#
# `pomo`: Simple pomodoro timer
#
# Depends: `tput`, `rm`, `mkdir`, `screen`/`tmux`
# Environment: none
#
# TODO: Alert function makes a mess if it executes while in insert mode in `vi`
# TODO: Remove dependencies: tput, screen, tmux. Add: setsid / nohup / script?
# TODO: De-bashify and POSIX-ulate (ANSI escapes instead of tput)

# Info about disowning a subprocess: https://stackoverflow.com/a/20338327

usage() {
	echo 'usage: pomo [ start <min>[m[<sec>s]] | stop | reset | resume ]'
	exit
} >&2

clear_screen() {
	printf '\e[H\e[2J'
}

print_msg() {
	# Move cursor to first cell of printing area.
	printf '\e[%s;%sH' $y0 $x0

	for char in "$B" "$R" "$E" "$A" "$K"; do
		printf '%s' "$char"
		printf '\e[2C\e[5A' # cursor right 2 up 5
	done

	# move cursor up <char_height> and right 2, to start of next
	# char.

	for char in "$T" "$I" "$M" "$E"; do
		printf '%s' "$char"
	done
}

unrec() {
	printf 'not recognised: %s\n' "$reply"
}

alert() {
	read -r lines cols <<-EOF
		$(stty size)
	EOF

	x0=$((cols / 2 - 15))
	y0=$((lines / 2 - 6))

	x=$x0
	y=$y0

	w=$(printf '\e[7m') # standout mode
	c=$(printf '\e[0m') # clear
	r=$(printf '\e[1B\e[5D') # cursor down 1 left 5

	X=' '
	pomo_emoji='🍅'

	# Printing starts at top left ends at bottom right.
	# '${r}' moves down 1 left 5
	# All letters are 6 * 6 cells
	# All cells must be filled (using leading/trailing spaces if nec.)
	# for '${r}' escape to work.
	B=$(
		printf '%s' \
		"${w}${X}${X}${X}${X}${c}${r} " \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${X}${X}${X}${c}${r} " \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${X}${X}${X}${c} "
	)

	R=$(
		printf '%s' \
		"${w}${X}${X}${X}${X}${c}${r} " \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${X}${X}${X}${c}${r} " \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}"
	)

	E=$(
		printf '%s' \
		"${w}${X}${X}${X}${X}${X}${c}${r}" \
		"${w}${X}${c}${r}    " \
		"${w}${X}${X}${X}${X}${c}${r} " \
		"${w}${X}${c}${r}    " \
		"${w}${X}${X}${X}${X}${X}${c}"
	)

	A=$(
		printf '%s' \
		" ${w}${X}${X}${X}${r} " \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${X}${X}${X}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}" \
	)

	K=$(
		printf '%s' \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${c}  ${w}${X}${c}${r}" \
		"${w}${X}${X}${X}${c}${r}" \
		"${w}${X}${c}  ${w}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}"
	)

	T=$(
		printf '%s' \
		"    ${w}${X}${X}${X}${X}${X}${c}${r}" \
		"      ${w}${X}${c}${r}" \
		"      ${w}${X}${c}${r}" \
		"      ${w}${X}${c}${r}" \
		"      ${w}${X}${c}"
	)

	I=$(
		printf '%s' \
		"${w}${X}${c}${r}" \
		"${w}${X}${c}${r}" \
		"${w}${X}${c}${r}" \
		"${w}${X}${c}${r}" \
		"${w}${X}${c}"
	)

	M=$(
		printf '%s' \
		" ${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${X}${c} ${w}${X}${X}${c}${r}" \
		"${w}${X}${c} ${w}${X}${c} ${w}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}${r}" \
		"${w}${X}${c}   ${w}${X}${c}"
	)

	print_msg

	while new_line; printf '%s Restart timer? [Y/n] ' "$pomo_emoji"; do
		read -r reply
		case "$reply" in
			[Yy]|[Yy]es|"") pomo start 25m ;;
			[Nn]|[Nn]o) : ;;
			*) next; printf '?\n'; continue ;;
		esac
		break
	done
}

is_running() {
	[[ -e $pid_log ]]
}

check() {
	local T
	[[ -e $time_log ]] && T="$(<"$time_log")"

	if is_running; then
		printf 'pomo: remaining: %02dm%02ds\n' $((T / 60)) $((T % 60))
	elif [[ -n $T ]]; then
		printf 'pomo: stopped: %02dm%02ds\n' $((T / 60)) $((T % 60))
	else
		! printf 'pomo: no timer info available\n' >&2
	fi
}

timer() {
	local time="$1" session="$2"

	[[ -d $log_dir ]] || mkdir "$log_dir"
	printf '%s\n' $$ >"$pid_log"

	while (( time > 0 )); do
		printf '%s\n' "$time" >"$time_log"
		((time--))
		sleep 1
	done

	if [ -n "$TMUX" ]; then
		tmux neww -t "$session" pomo alert
	elif [ -n "$STY" ]; then
		screen -S "$session" -X screen pomo alert
	else
		# TODO: Probably quite a few holes here.
		case "$term" in
			xterm*) term=$(command -v xterm) ;;
			rxvt*) term=$(command -v rxvt) ;;
			*) term=$(command -v x-terminal-emulator) ;;
		esac

		exec "$term" pomo alert
	fi

	rm -r "$log_dir"
	stop
}

start() {
	local seconds minutes time regex session
	time="${1:-25m}"

	if regex='^([0-9]+)m([0-9]+)s$'; [[ $time =~ $regex ]]; then
		minutes="${BASH_REMATCH[1]}"
		seconds="${BASH_REMATCH[2]}"
	elif regex='^([0-9]+)([ms]?)$'; [[ $time =~ $regex ]]; then
		case "${BASH_REMATCH[2]}" in
			m|"") minutes="${BASH_REMATCH[1]}" ;;
			s) seconds="${BASH_REMATCH[1]}" ;;
		esac
	else
		usage
	fi

	time=$((${minutes:=0} * 60 + ${seconds:=0}))

	if [[ -n $TMUX ]]; then
		session="$(tmux display -p '#{session_id}')"
		tmux new -ds pomodoro pomo timer "$time" "$session" 2>/dev/null
	elif [[ -n $STY ]]; then
		session="$STY"
		screen -qlsS pomodoro
		(( $? < 11 )) && screen -c/dev/null -dmS pomodoro \
			pomo timer "$time" "$session"
	else
		( pomo timer "$time" & )
	fi
}

stop() {
	is_running && kill "$(<"$pid_log")"
	rm "$pid_log"
	check
}

reset() {
	rm -r "$log_dir" 2>/dev/null
}

resume() {
	start "$(<"$time_log")s"
}

main() {
	log_dir=/tmp/pomo
	time_log="${log_dir}/time"
	pid_log="${log_dir}/pid"

	(( $# > 3 )) && usage

	case "$1" in
		start) start "$2" ;;
		stop) stop ;;
		reset) reset ;;
		resume) resume ;;
		timer) timer "$2" "$3" ;;
		alert) alert ;;
		"") check ;;
		-h|--help|*) usage ;;
	esac
}

main "$@"

