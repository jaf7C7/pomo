#!/bin/bash
#
# `pomo`: Simple pomodoro timer
#
# Depends: `tput`, `rm`, `mkdir`, `screen`/`tmux`
# Environment: none
#
# TODO: Alert function makes a mess if it executes while in insert mode in `vi`
# TODO: Remove dependencies: tput, screen, tmux. Add: setsid / nohup / script?
# TODO: De-bashify and POSIX-ulate (ANSI escapes instead of tput)

# Info about disowning a subprocess: https://stackoverflow.com/a/20338327

usage() {
	echo 'usage: pomo [ start <min>[m[<sec>s]] | stop | reset | resume ]'
	exit
} >&2

clear() {
	printf '\033[H\033[2J'
}
 
cursor_pos() {
	# lines columns (y, x)
	printf '\033[%s;%sH' $1 $2
}

alert() {
	# TODO:
	# 1. char_print function which takes start $lines $cols
	# 	1. "private" $_lines $_cols
	# 	1. save cursor top left of char (0,0)
	# 	1. print line
	# 	1. cursor to x0
	# 	[...]
	# 	1. return cursor to 0,0
	# 1. function wrapping char_print to set starting pos. for each letter
	# 	1. cursor to start point $lines $cols
	# 	1. for <char_in_line...>; do
	# 		1. print_char
	# 		1. new start point $lines $cols
	# 		[...]
	# 	1. new line $lines $cols
	# 	1. for <char_in_line...>; do
	# 		1. print_char
	# 		1. new start point $lines $cols
	# 		[...]

	read -r lines cols <<-EOF
		$(stty size)
	EOF

	x0=$((cols / 2 - 15)) y0=$((lines / 2 - 6))
	x=$x0 y=$y0

	X=' '
	w=$(printf '\033[7m') # standout mode
	c=$(printf '\033[0m') # standout clear
	r=$(printf '\033[1B\033[6D') # cursor down 1, left 6
	start=$(printf '\033[s') # save cursor
	end=$(printf '\033[u\033[7C') # restore cursor, cursor right 7
	pomo_emoji='🍅'

	read -r B <<EOF
${start}${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${X}${X}${X}${X}${c}${end}
EOF

	read -r R <<EOF
${start}${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${c}   ${w}${X}${X}${c}${end}
EOF
	read -r E <<EOF
${start}${w}${X}${X}${X}${X}${X}${X}${c}${r}\
${w}${X}${c}     ${r}\
${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}     ${r}\
${w}${X}${X}${X}${X}${X}${X}${c}${end}
EOF

	read -r A <<EOF
${start} ${w}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}    ${w}${X}${c}${r}\
${w}${X}${X}${X}${X}${X}${X}${c}${r}\
${w}${X}${c}    ${w}${X}${c}${r}\
${w}${X}${c}    ${w}${X}${c}${end}
EOF

	read -r K <<EOF
${start}${w}${X}${c}    ${w}${X}${c}${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${X}${X}${X}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${X}${c}${r}\
${w}${X}${c}   ${w}${X}${X}${c}${end}
EOF

	read -r T <<EOF
${start}    ${w}${X}${X}${X}${X}${X}${c} ${r}\
      ${w}${X}${c} ${r}\
      ${w}${X}${c} ${r}\
      ${w}${X}${c} ${r}\
      ${w}${X}${c}${end}
EOF

	read -r I <<EOF
${start}${w}${X}${c} ${r}\
${w}${X}${c} ${r}\
${w}${X}${c} ${r}\
${w}${X}${c} ${r}\
${w}${X}${c}${end}
EOF

	read -r M <<EOF
${start} ${w}${X}${c}   ${w}${X}${c} ${r}\
${w}${X}${X}${c} ${w}${X}${X}${c} ${r}\
${w}${X}${c} ${w}${X}${c} ${w}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${c} ${r}\
${w}${X}${c}   ${w}${X}${c}${end}
EOF

	clear
	cursor_pos "$y0" "$x0"
	printf '%s' "${B}${R}${E}${A}${K}"
	#printf '%s' "${B}${R}${E}${A}${K}"

	read -r _ # debug
#-------------------------------------------------------------------------BREAK
	exit 1

	while new_line; printf '%s Restart timer? [Y/n] ' "$pomo_emoji"; do
		read -r reply
		case "$reply" in
			[Yy]|[Yy]es|"") pomo start 25m ;;
			[Nn]|[Nn]o) : ;;
			*) next; printf '?\n'; continue ;;
		esac
		break
	done
}

unrec() {
	printf 'not recognised: %s\n' "$reply"
}

is_running() {
	[[ -e $pid_log ]]
}

check() {
	local T
	[[ -e $time_log ]] && T="$(<"$time_log")"

	if is_running; then
		printf 'pomo: remaining: %02dm%02ds\n' $((T / 60)) $((T % 60))
	elif [[ -n $T ]]; then
		printf 'pomo: stopped: %02dm%02ds\n' $((T / 60)) $((T % 60))
	else
		! printf 'pomo: no timer info available\n' >&2
	fi
}

timer() {
	local time="$1" session="$2"

	[[ -d $log_dir ]] || mkdir "$log_dir"
	printf '%s\n' $$ >"$pid_log"

	while (( time > 0 )); do
		printf '%s\n' "$time" >"$time_log"
		((time--))
		sleep 1
	done

	if [ -n "$TMUX" ]; then
		tmux neww -t "$session" pomo alert
	elif [ -n "$STY" ]; then
		screen -S "$session" -X screen pomo alert
	else
		# TODO: Probably quite a few holes here.
		case "$term" in
			xterm*) term=$(command -v xterm) ;;
			rxvt*) term=$(command -v rxvt) ;;
			*) term=$(command -v x-terminal-emulator) ;;
		esac

		exec "$term" pomo alert
	fi

	rm -r "$log_dir"
	stop
}

start() {
	local seconds minutes time regex session
	time="${1:-25m}"

	if regex='^([0-9]+)m([0-9]+)s$'; [[ $time =~ $regex ]]; then
		minutes="${BASH_REMATCH[1]}"
		seconds="${BASH_REMATCH[2]}"
	elif regex='^([0-9]+)([ms]?)$'; [[ $time =~ $regex ]]; then
		case "${BASH_REMATCH[2]}" in
			m|"") minutes="${BASH_REMATCH[1]}" ;;
			s) seconds="${BASH_REMATCH[1]}" ;;
		esac
	else
		usage
	fi

	time=$((${minutes:=0} * 60 + ${seconds:=0}))

	if [[ -n $TMUX ]]; then
		session="$(tmux display -p '#{session_id}')"
		tmux new -ds pomodoro pomo timer "$time" "$session" 2>/dev/null
	elif [[ -n $STY ]]; then
		session="$STY"
		screen -qlsS pomodoro
		(( $? < 11 )) && screen -c/dev/null -dmS pomodoro \
			pomo timer "$time" "$session"
	else
		( pomo timer "$time" & )
	fi
}

stop() {
	is_running && kill "$(<"$pid_log")"
	rm "$pid_log"
	check
}

reset() {
	rm -r "$log_dir" 2>/dev/null
}

resume() {
	start "$(<"$time_log")s"
}

main() {
	log_dir=/tmp/pomo
	time_log="${log_dir}/time"
	pid_log="${log_dir}/pid"

	(( $# > 3 )) && usage

	case "$1" in
		start) start "$2" ;;
		stop) stop ;;
		reset) reset ;;
		resume) resume ;;
		timer) timer "$2" "$3" ;;
		alert) alert ;;
		"") check ;;
		-h|--help|*) usage ;;
	esac
}

main "$@"

