#!/bin/sh
# 
# `pomo`: Simple pomodoro timer
# 
# Dependencies:
# - POSIX utilities: `[` `kill` `printf` `ps` `read` `rm` `sleep` `stty`
# - `tmux` (recommended) or `screen`, or some kind of terminal emulator
#   which supports the `-e <command>` option.
# 
# Environment:
: "${TMPDIR:=${TMP:=${TEMP:=/tmp}}}"

usage() {
	printf '%s\n' \
	'usage: pomo [ start [<min>[m[<sec>s]]] | pause | stop ]'
	exit
} >&2

error() {
	# Stop timer and delete log file if an error is thrown.
	stop
	printf '%s: %s\n' "${0##*/}" "$*"
	exit 1
} >&2

pause() {
	kill -s STOP "$pid"
	check
} 2>/dev/null

stop() {
	kill "$pid"

	# If the timer is stopped it won't notice the kill signal until
	# it's started again.
	kill -s CONT "$pid"

	rm "$log_file"
} 2>/dev/null

timer_alive() {
	# `kill -0` has no effect but checks for a valid pid, i.e. an
	# existing process.
	kill -0 "$pid"
} 2>/dev/null

timer_running() {
	[ -z "$pid" ] && return 1

	# POSIX doesn't specify `ps -o state` unfortunately, hence this
	# workaround to get the process state.
	while read -r F S _; do
		# Skip the line with the headers. 'F S UID PID ...'
		[ "$F" = 'F' ] && continue

		# R -> Running/runnable
		# S -> Interruptible sleep (probably sleep(1)ing)
		case $S in
			R|S) return 0
		esac

	done <<-EOF
		$(ps -lp "$pid")
	EOF

	return 1
}

# Parses the '<min>m<sec>s' time format and sets the `time` variable.
get_time() {
	time="${1:-25m}"

	case $time in
		*m*s) min="${time%%m*}" sec="${time##*m}" sec="${sec%s}" ;;
		*m)   min="${time%%m*}" ;;
		*s)   sec="${time%s}" ;;
	esac

	case ${min}${sec} in
		*[!0-9]*|'') error "bad time format: $time"
	esac

	time=$((min * 60 + sec))
}

# Sets the `term` variable. Has to be called outside of the timer process
# because the timer has no controlling terminal.
get_term() {
	_pid=$$

	# Usually, in order to find the name of the terminal emulator, we
	# only need to check the PPID of the current shell, but the `pomo`
	# command may be run from several subshells deep (i.e. from inside
	# `less` or `vi` etc.).
	# 
	# The loop follows the process tree back up until we find an
	# ancestor not associated with a tty. This will be the terminal
	# emulator itself.
	until [ "$tty" = '?' ]; do
		read -r ppid tty comm <<-EOF
			$(ps -p "$_pid" -o ppid=,tty=,comm=)
		EOF

		_pid="$ppid"
	done

	# TODO: There are inevitably many more terminal emulators than
	# are listed here. Ideally a terminal-independent way would be
	# found. Probably just demanding a `tmux` dependency is the best
	# idea.
	#
	# This doesn't always return the correct terminal executable
	# name. e.g. 'gnome-terminal' -> 'gnome-terminal-'
	# so we need to explicitly handle each known terminal-type:
	case $comm in
		xterm|rxvt*|screen|mlterm|cool-retro-term|deepin-terminal|\
		kitty|konsole|lxterminal|pterm|sakura|stterm|terminus|\
		xfce4-terminal)   term="$comm" ;;
		*gnome-terminal*) term='gnome-terminal' ;;
		*terminator)      term='terminator' ;;
		*kgx*)            term='kgx' ;;
		tmux*)            term='tmux' ;;
		*)
			# `"$term" -e pomo alert` will still be attempted
			# on unknown terminal types, just in case, so
			# don't fail yet.
			term="$comm"
		;;
	esac
}

timer() {
	[ $# -gt 2 ] || error "cannot set timer: not enough arguments"

	trap 'stop; exit 1' INT

	time="$1" term="$2" session="$3"

	while :; do
		# A kind of 'do-while' loop to ensure that even if the
		# timer is initialised to '0s' the pid of the timer is still
		# printed to the log file, so it can be killed by the 
		# `stop` function. Otherwise `pomo start 0s` results in
		# an infinite loop.
		while {
			printf '%s ' "$$" "$time" "$session" >"$log_file"
			[ "$time" -gt 0 ]
		} do
			time=$((time - 1))
			sleep 1
		done
		
		alert_cmd

		# Halt execution, pending the 'CONT' signal from the alert
		# dialog.
		kill -s STOP $$

		# If/when the timer resumes it will read the updated time
		# from the log file and then start over again.
		read -r _ time _ <"$log_file"
	done
}

check() {
	timer_alive || error 'no timer info available'

	if timer_running; then
		printf '%s' 'remaining: '
	else
		printf '%s' 'paused: '
	fi

	printf '%02dm%02ds\n' $((time / 60)) $((time % 60))
}

start() {
	timer_running && error 'already running'

	timer_alive && {
		kill -s CONT "$pid"
		return
	}

	[ -n "$time" ] || get_time "$@"
	[ -n "$term" ] || get_term

	[ -n "$STY" ] && session="$STY"
	[ -n "$TMUX" ] && session=$(tmux display -p '#{session_id}')

	# `(...)` creates a child process, `&` creates a grandchild process.
	#
	# The child shell exits and the grandchild is orphaned, and will not
	# be sent the 'HUP' signal if the grandparent exits.
	#
	# Variables need to be passed explicitly to the grandchild as
	# parameters or otherwise exported so they are available in
	# subshells.
	( pomo timer "$time" "$term" "$session" & )
}

alert_cmd() {
	# TODO: This is a hassle. See TODO on `get_term`.
	case $term in
		screen)         screen -S "$session" -X screen pomo alert ;;
		tmux)           tmux neww -t "$session" pomo alert ;;
		gnome-terminal) gnome-terminal -- pomo alert ;;
		xfce4-terminal) xfce4-terminal -x pomo alert ;;
		terminator)     terminator -x pomo alert ;;
		terminus)       terminus -x -- pomo alert ;;
		kgx)            kgx -e 'pomo alert' ;;
		kitty)          kitty pomo alert ;;
		*)
			# Otherwise, assume the terminal supports `-e`
			# option.
			"$term" -e pomo alert 2>/dev/null \
				|| error "terminal not supported: $term"
		;;
	esac
}

alert() {
	trap 'stop; exit 1' INT

	read -r lines cols <<-EOF
		$(stty size)
	EOF

	x=$((cols / 2 - 15))
	y=$((lines / 2 - 6))

	r=$(printf '\033[7m') # Reverse
	c=$(printf '\033[0m') # Clear

	print() {
		for line do
			# Position cursor and print line; `%b` allows
			# interpretation of '\<char>' escape sequences in
			# the string to be printed.
			# 
			# This is useful for adding an optional '\n'
			# (newline) to scroll the screen. Otherwise we
			# cannot position the cursor below the last line
			# of the terminal.
			# 
			# See the `help` function below for an example.
			printf '\033[%s;%sH%b' "$y" "$x" "$line"

			y=$((y + 1))
		done
	}

	# ###  ###  #####  ###  #   #
	# #  # #  # #     #   # #  #
	# ###  ###  ####  ##### ###
	# #  # #  # #     #   # #  #
	# ###  #  # ##### #   # #   #
	#
	#   ##### # #   # ##### #
	#     #   # ## ## #     #
	#     #   # # # # ####  #
	#     #   # #   # #
	#     #   # #   # ##### #
	#
	print \
	"$r    $c  $r    $c  $r     $c  $r   $c  $r $c   $r $c" \
	"$r $c   $r $c $r $c   $r $c $r $c     $r $c   $r $c $r $c  $r $c" \
	"$r    $c  $r    $c  $r    $c  $r     $c $r   $c" \
	"$r $c   $r $c $r $c   $r $c $r $c     $r $c   $r $c $r $c  $r $c" \
	"$r    $c  $r $c   $r $c $r     $c $r $c   $r $c $r $c   $r $c" \
	"" \
	"    $r     $c $r $c $r $c   $r $c $r     $c $r $c" \
	"      $r $c   $r $c $r  $c $r  $c $r $c     $r $c" \
	"      $r $c   $r $c $r $c $r $c $r $c $r    $c  $r $c" \
	"      $r $c   $r $c $r $c   $r $c $r $c" \
	"      $r $c   $r $c $r $c   $r $c $r     $c $r $c" \
	""

	# The trailing '\n' in each line forces the screen to scroll,
	# otherwise it keeps printing over the last screen line.
	help() {
		print \
		'y)      new 25min timer\n' \
		'n)      exit\n' \
		'<time>) custom timer: <min>[m[<sec>s]]\n'
	}

	prompt='🍅 Start new timer? [Y/n] (? for help)'

	x=$(((cols - ${#prompt}) / 2))

	print "$prompt"

	while print '>> '; read -r reply; do
		case $reply in
			[Yy]|'')       unset reply ;;
			[Nn])          stop; return ;;
			\?|*[!0-9ms]*) help; continue ;;
		esac

		break
	done

	get_time "$reply"

	# Update the log file, from which the `timer` process
	# will read the new starting time.
	printf '%s ' '_' "$time" '_' >"$log_file"

	start
}

main() {
	log_file="$TMPDIR/pomo.log"

	[ -e "$log_file" ] && read -r pid time _ <"$log_file"

	case $1 in
		timer) shift; timer "$@" ;;
		start) shift; start "$@" ;;
		stop)  stop ;;
		pause) pause ;;
		alert) alert ;;
		'')    check ;;
		-h)    usage ;;
		*)     ! usage ;;
	esac
}

main "$@"

